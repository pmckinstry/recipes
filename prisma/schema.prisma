generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  recipes       Recipe[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Recipe {
  id           String        @id @default(uuid())
  title        String
  author       String
  instructions String
  rating       Int
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  ingredients  Ingredient[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  labels       RecipeLabel[]
}

model Ingredient {
  id        String   @id @default(uuid())
  quantity  Float
  unit      String
  name      String
  recipeId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model Label {
  id        String        @id @default(uuid())
  name      String        @unique
  color     String        @default("#3B82F6")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  recipes   RecipeLabel[]
}

model RecipeLabel {
  id        String   @id @default(uuid())
  recipeId  String
  labelId   String
  createdAt DateTime @default(now())
  label     Label    @relation(fields: [labelId], references: [id], onDelete: Cascade)
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([recipeId, labelId])
}
